diff --git a/node_modules/@types/babel__core/index.d.ts b/node_modules/@types/babel__core/index.d.ts
index 744db30..1c89bc0 100644
--- a/node_modules/@types/babel__core/index.d.ts
+++ b/node_modules/@types/babel__core/index.d.ts
@@ -8,7 +8,7 @@
 // Minimum TypeScript Version: 3.4
 
 import { GeneratorOptions } from "@babel/generator";
-import traverse, { Visitor, NodePath } from "@babel/traverse";
+import traverse, { Visitor, NodePath, Hub, Scope } from "@babel/traverse";
 import template from "@babel/template";
 import * as t from "@babel/types";
 import { ParserOptions } from "@babel/parser";
@@ -412,15 +412,34 @@ export function transformFromAstAsync(ast: Node, code?: string, opts?: Transform
 // the following interface. Babel will throw if it finds unknown properties.
 // The list of allowed plugin keys is here:
 // https://github.com/babel/babel/blob/4e50b2d9d9c376cee7a2cbf56553fe5b982ea53c/packages/babel-core/src/config/option-manager.js#L71
-export interface PluginObj<S = {}> {
+export interface PluginObj<S = PluginPass> {
     name?: string;
     manipulateOptions?(opts: any, parserOpts: any): void;
-    pre?(this: S, state: any): void;
+    pre?(this: S, state: S): void;
     visitor: Visitor<S>;
-    post?(this: S, state: any): void;
+    post?(this: S, state: S): void;
     inherits?: any;
 }
 
+export interface BabelFile {
+    ast: t.File;
+    opts: TransformOptions;
+    hub: Hub;
+    metadata: object;
+    path: NodePath;
+    scope: Scope;
+    inputMap: object | null;
+    code: string;
+}
+
+export interface PluginPass {
+    file: BabelFile;
+    key: string;
+    opts: PluginOptions
+    cwd: string;
+    filename: string;
+}
+
 export interface BabelFileResult {
     ast?: t.File | null;
     code?: string | null;
